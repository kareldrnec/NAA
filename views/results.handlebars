{{> navbar}}

<div class="btn-group btn-group-toggle" data-toggle="buttons">
  <label class="btn btn-secondary active" id="summaryLabel">
    <input type="radio" name="options" id="option1" autocomplete="off" checked> {{__ "summary"}}
  </label>
  <label class="btn btn-secondary" id="statesLabel">
    <input type="radio" name="options" id="option2" autocomplete="off"> {{__ "states"}}
  </label>
  <label class="btn btn-secondary" id="activitiesLabel">
    <input type="radio" name="options" id="option3" autocomplete="off"> {{__ "activities"}}
  </label>
</div>

<div id="resultsContent">
    <div style="text-align: center;">
        <table class="table table-hover" id="table" style="table-layout: fixed;">
            <thead id="tableHead" style="background-color: lightskyblue;">
            </thead>
            <tbody id="tableBody">
            </tbody>
            <tfoot id="tableFoot"></tfoot>
        </table>
    </div>
</div>

<script>
    var tableBody;
    var results = JSON.parse(sessionStorage.getItem("{{projectID}}"))
    var numberOfStates = (results.states).length;
    var numberOfActivities = (results.activities).length;
    var thead;
    var tbody;
    var tfoot;
    var row;


    summaryTable();


    document.getElementById("summaryLabel").addEventListener('click', summaryTable);

    function summaryTable() {
        var thead = document.getElementById("tableHead");
        var tbody = document.getElementById("tableBody");
        var tfoot = document.getElementById("tableFoot");
        var row = null;
        var projectInfo = "{{projectInfo}}";
        var criticalActivities = results.activities.filter(element => element.critical == true);
        if (projectInfo == "") projectInfo = "<i>--{{__ "undefined"}}--</i>"

        thead.innerHTML = 
            "<th colspan=2> {{__ "summary"}}</th>";
        tbody.innerHTML =
            "<tr><td>" + "{{__ "project name"}}" + "</td><td>" + "{{projectName}}" + "</td></tr>"
            + "<tr><td>" + "{{__ "project type"}}" + "</td><td>" + "{{upper projectType}}" + "</td></tr>"
            + "<tr><td>" + "{{__ "project info"}}" + "</td><td>" + projectInfo + "</td></tr>"
            + "<tr><td>" + "{{__ "number of activities"}}" + "</td><td>" + numberOfActivities + "</td></tr>"
            + "<tr><td>" + "{{__ "number of states"}}" + "</td><td>" + numberOfStates + "</td></tr>";
        row = tbody.insertRow();
        row.innerHTML = 
            "<tr><td colspan=2>" + "<b>{{__ "results"}}</b>" + "</td></tr>"
        row.className = "table-primary";

        tbody.innerHTML +=
            "<tr><td>" + "{{__ "number of critical activities"}}" + "</td><td>" + criticalActivities.length + "</td></tr>"
            + "<tr><td>" + "{{__ "number of critical paths"}}" + "</td><td>" + (results.project.criticalPathsArr).length + "</td></tr>" // TODO

        row = tbody.insertRow();
        row.innerHTML = 
            "<tr><td colspan=2>" + "<b>{{__ "critical paths"}}</b>" + "</td></tr>";
        row.className = "table-primary";

        for (var i = 0; i < (results.project.criticalPathsArr).length; i++) {
            row = tbody.insertRow();
            row.innerHTML =
                "<tr><td>" + (i + 1) + "</td><td>" + results.project.criticalPathsArr[i] + "</td></tr>";
        }

        if ("{{projectType}}" == "pert") {
            row = tbody.insertRow();
            row.innerHTML = 
                "<tr><td colspan=2>" + "<b>PERT</b>" + "</td></tr>";
            row.className = "table-primary";
            tbody.innerHTML +=
                "<tr><td>" + "&mu;" + "</td><td>" + results.project.meanValue + "/6" + "</td></tr>"
                + "<tr><td>" + "&sigma;"+ "<sup>2</sup>" + "</td><td>" + results.project.totalVariance + "/36" + "</td></tr>"
            row = tbody.insertRow();
            row.innerHTML =
                "<tr><td colspan=2>" + getPertText(results.project.result) + "</td></tr>";
            row.className = "table-success";
        } else {
            row = tbody.insertRow();
            row.innerHTML = 
                "<tr><td colspan=2>" + "<b>CPM</b>" + "</td></tr>";
            row.className = "table-primary";

            tbody.innerHTML +=
                "<tr><td>" + "{{__ "length of project"}}" + "</td><td>" + results.project.length + " {{__ "hours res"}}" + "</td></tr>";
            
            row = tbody.insertRow();
            row.className = "table-success";
        }
    }

    function getPertText(arguments) {
        var res = null;
        if (arguments.length == 7) {
            res = "P(" + arguments[2];
            if (arguments[1] == 'gt') {
                res += " < X";
            } else {
                res += " > X";
            }

            if (arguments[3] == 'lt') {
                res += " < " + arguments[4] + ") = " + (arguments[5] * 100).toFixed(4) + "%"; 
            } else {
                res += " > " + arguments[4] + ") = " + (arguments[5] * 100).toFixed(4) + "%"; 
            }

        } else if(arguments.length == 4) {
            res = "T(P = " + arguments[2] + "%) = " + arguments[3].toFixed(2) + " ({{__ "hours res"}})";
        } else {
            res = "P(X "; 
            if (arguments[1] == 'lt') {
                res += "< ";
            } else {
                res += "> ";
            }
            res += arguments[2] + ")=" + (arguments[3] * 100).toFixed(4) + "%";

        }
        return res;
    }



    document.getElementById("statesLabel").addEventListener('click', () => {
        createHeadStates();
        createBodyStates();
    });
   
    document.getElementById("activitiesLabel").addEventListener('click', () => {
        if ("{{projectType}}" == "cpm") {
            createHeadActivitiesCPM();
            createBodyActivitiesCPM();
            createBottomActivitiesCPM();
        } else {
            createHeadActivitiesPERT();
            createBodyActivitiesPERT();
            createBottomActivitiesPERT();
        }
    })

    function createHeadStates() {
        thead = document.getElementById("tableHead");
        thead.innerHTML = 
        "<th>" + "#" + "</th>"
        + "<th>" + "{{__ "state name"}}" + "</th>"
        + "<th>" + "ES" + "</th>"
        + "<th>" + "LS" + "</th>"
        + "<th>" + "{{__ "slack"}}" + "</th>";
       // + "<th>" + "{{__ "time unit"}}" + "</th>";
    }

    function createHeadActivitiesCPM() {
        thead = document.getElementById("tableHead");
        thead.innerHTML =
            "<th>" + "#" + "</th>"
            + "<th>" + "{{__ "activity name"}}" + "</th>"
            + "<th>" + "{{__ "activity type"}}" + "</th>"
            + "<th>" + "y" + "<sub>ij</sub>" + "</th>";
    }

    function createHeadActivitiesPERT() {
        thead = document.getElementById("tableHead");
        thead.innerHTML = 
            "<th>" + "#" + "</th>"
            + "<th>" + "{{__ "activity name"}}" + "</th>"
            + "<th>" + "{{__ "activity type"}}" + "</th>"
            + "<th>" + "a" + "<sub>ij</sub>" + "</th>"
            + "<th>" + "m" + "<sub>ij</sub>" +"</th>"
            + "<th>" + "b" + "<sub>ij</sub>" + "</th>"
            + "<th>" + "&mu;" + "<sub>ij</sub>" + "</th>"
            + "<th>" + "&sigma;" + "<sub>ij</sub>" + "</th>"
            + "<th>" + "&sigma;" + "<sub>ij</sub>" + "<sup>2</sup>" + "</th>";
    }


    function createBodyStates() {
        const states = results.states;
        var ES, LS, slack;
        var row;
        tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = "";
        for (var i = 0; i < states.length; i++) {
            if (states[i].slack == 0) {
                slack = 0;
            } else {
                slack = states[i].slack;
                if ("{{projectType}}" == "pert") slack += "/6";
            }
            if (states[i].ES == 0) {
                ES = 0;
            } else {
                ES = states[i].ES;
                if ("{{projectType}}" == "pert") ES += "/6";
            }
            if (states[i].LS == 0) {
                LS = 0;
            } else {
                LS = states[i].LS;
                if ("{{projectType}}" == "pert") LS += "/6";
            }

            row = tableBody.insertRow();
            row.innerHTML = 
                "<tr>" + "<td>" + (i + 1) + "</td>"
                + "<td>" + states[i].name + "</td>"
                + "<td>" + ES + "</td>"
                + "<td>" + LS + "</td>"
                + "<td>" + slack + "</td>" + "</tr>";
            if (states[i].slack == 0) {
                row.className = "table-danger";
            }
        }
    }

    function createBodyActivitiesCPM() {
        const activitiesDB = JSON.parse("{{activitiesData}}".replace(/&quot;/g, '"'));
        const activities = results.activities;
        var type;
        var row;
        var resultActivity;
        var length;
        tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = "";
        for (var i = 0; i < activitiesDB.length; i++) {
            resultActivity = activities.find(element => element.ID == activitiesDB[i].ID);
            length = parseInt(activitiesDB[i].values[0]);
            if (activitiesDB[i].timeUnit != "hours") {
                length = convertToHours(length, activitiesDB[i].timeUnit);
            }
            if (activitiesDB[i].type == "normal") {
                type = "{{__ "normal"}}";
            } else {
                type = "{{__ "dummy"}}";
            }
            row = tableBody.insertRow();
            row.innerHTML =
                "<tr>" + "<td>" + (i + 1) + "</td>"
                + "<td>" + activitiesDB[i].name + "</td>"
                + "<td>" + type + "</td>"
                + "<td>" + length + "</td>" + "</tr>"
            if (resultActivity.critical == true) {
                row.className = "table-danger";
            }
        }
    }

    function createBodyActivitiesPERT() {
        const activitiesDB = JSON.parse("{{activitiesData}}".replace(/&quot;/g, '"'));
        const activities = results.activities;
        var a, m, b;
        var type, resultActivity;
        tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = "";

        for (var i = 0; i < activitiesDB.length; i++) {
            resultActivity = activities.find(element => element.ID == activitiesDB[i].ID);
            a = parseInt(activitiesDB[i].values[0]);
            m = parseInt(activitiesDB[i].values[1]);
            b = parseInt(activitiesDB[i].values[2]);
            if (activitiesDB[i].timeUnit != "hours") {
                a = convertToHours(a, activitiesDB[i].timeUnit);
                m = convertToHours(m, activitiesDB[i].timeUnit);
                b = convertToHours(b, activitiesDB[i].timeUnit);
            }
            if (activitiesDB[i].type == "normal") {
                type = "{{__ "normal"}}";
            } else {
                type = "{{__ "dummy"}}";
            }
            row = tableBody.insertRow();
            row.innerHTML = 
                "<tr>" + "<td>" + (i + 1) + "</td>"
                + "<td>" + activitiesDB[i].name + "</td>"
                + "<td>" + type + "</td>"
                + "<td>" + a + "</td>"
                + "<td>" + m + "</td>"
                + "<td>" + b + "</td>"
                + "<td>" + resultActivity.value + "/6" + "</td>"
                + "<td>" + resultActivity.std + "/6" + "</td>"
                + "<td>" + (resultActivity.std * resultActivity.std) + "/36" + "</td>"
                + "</tr>";
            if (resultActivity.critical == true) {
                row.className = "table-danger";
            }
        }
    }

    function getTimeUnit(timeUnit) {
        var time;
        switch (timeUnit) {
            case "hours":
                time = "{{__ "hours"}}";
                break;
            case "days":
                time = "{{__ "days"}}";
                break;
            case "weeks":
                time = "{{__ "weeks"}}";
                break;
            case "months":
                time = "{{__ "months"}}";
                break;
        }
        return time;
    }


    function createBottomActivitiesCPM() {
        tbody = document.getElementById("tableBody");
        row = tbody.insertRow();
        row.innerHTML =
            "<tr><td>" + "{{__ "total"}}" + "</td>"
            + "<td colspan=2></td>"
            + "<td>" + results.project.length + " {{__ "hours res"}}" + "</td>"
            + "</tr>";
        row.className = "table-success";
    }

    function createBottomActivitiesPERT() {
        var tbody = document.getElementById("tableBody");
        var row = tbody.insertRow();
        row.innerHTML =
            "<tr>" + "<td>" + "{{__ "total"}}" + "</td>"
            + "<td>" + "" + "</td>"
            + "<td>" + "" + "</td>"
            + "<td>" + "" + "</td>"
            + "<td>" + "" + "</td>"
            + "<td>" + "" + "</td>"
            + "<td>" + results.project.meanValue + "/6" + " {{__ "hours res"}}" + "</td>"
            + "<td>" + "" + "</td>"
            + "<td>" + results.project.totalVariance + "/36" + " {{__ "hours res"}}" + "</td>"
            + "</tr>";
        row.className = "table-success";
    }

    function convertToHours(value, timeUnit) {
        if (timeUnit == "months") {
            value = value * 24 * 30;
        } else if (timeUnit == "weeks") {
            value = value * 24 * 7;
        } else {
            value = value * 24;
        }
        return value;
    }


</script>
