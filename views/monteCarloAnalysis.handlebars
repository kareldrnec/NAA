{{> navbar}}

{{#if flash}}
    <div style="text-align: center; position: absolute; width: 100%;" id="flash" class="alert alert-{{flash.type}}" role="alert">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <strong>{{flash.text}}</strong>
    </div>
{{/if}}

<div class="container-fluid bg pt-5">
    <div class="row">
        <div class="col-md-4 col-sm-4 col-xs-12">
            <div class="text-center">
                <h3> {{__ "project data"}}</h3>
            </div>
            <div class="form-group">
                <label>&mu;</label>
                <input type="text" class="form-control" id="meanValueOfProject" title="{{__ "project mean value"}}" readonly> 
                <label>&sigma;<sup>2</sup></label>
                <input type="text" class="form-control" id="varianceOfProject" title="{{__ "project variance"}}" readonly> 
            </div>

            <hr class="solid">

            <form class="form-container" action="">
                <div class="text-center">
                    <h3>{{__ "simulation"}}</h3>
                </div>
                <div class="form-group">
                    <label for="numberOfIterations">{{__ "number of iterations"}}</label>
                    <input type="number" class="form-control" id="numberOfIterations" placeholder="{{__ "enter number of iterations"}}" min="1000" value="1000" step="1000">
                </div>
                <div class="form-group">
                    <div class="row g-2">
                        <div class="col-sm">
                            <label>{{__ "find"}}</label>
                            <input class="form-control" value="P" readonly>
                        </div>
                        <div class="col-sm">
                            <label>{{__ "option"}}</label>  
                            <select class="form-control" id="optionSelect">
                                <option value="<">&lt;</option>
                                <option value=">">&gt;</option>
                            </select>
                        </div>
                        <div class="col-sm">
                            <label>{{__ "value"}}</label>
                            <input class="form-control" type="number" id="desiredTimeValue" min="0" value="0">
                        </div>
                    </div>
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary" id="runSimulationButton">{{__ "run simulation"}}</button>
                    <button type="button" class="btn btn-secondary" id="stopSimulationButton">{{__ "stop simulation"}}</button>
                </div>
            </form>
            <div style="background-color: #ffb8b8; margin-top: 10px; display: none;" id="monteCarloErrDiv">
                <button type="button" class="close" onclick="closeMonteCarloErr()" style="margin-right: 5px;">
                    <span aria-hidden="true">&times;</span>
                </button>
                <div id="monteCarloErrMsg" style="margin-left: 5px;">
                </div>
            </div>
            
            <hr class="solid">

            <!-- simulation results -->
            <div id="simulationResultsDiv">
                <div class="text-center">
                    <h4>{{__ "simulation results"}}</h4>
                </div>
                <div class="row g-2">
                    <div class="col-sm"></div>
                    <div class="col-sm">
                        <input id="res" class="form-control" type="text" style="text-align:center;">
                    </div>
                    <div class="col-sm"></div>
                </div>
            </div>

            <hr class="solid">
        </div>
        <div class="col-md-8 col-sm-8 col-xs-24">
            <div style="width: 200px;" class="text-center">
                <label for="volume">{{__ "max y axis"}}</label>
                <input type="range" id="rangeY" name="rangeY" min="0.01" step="0.01" max="1" value="0.03">
            </div>
            <canvas id="myChart" width="800px" height="300px"></canvas>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.0/chart.min.js"
    integrity="sha512-GMGzUEevhWh8Tc/njS0bDpwgxdCJLQBWG3Z2Ct+JGOpVnEmjvNx6ts4v6A2XJf1HOrtOsfhv3hBKpK9kE5z8AQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
    const activities = JSON.parse(sessionStorage.getItem("activities"));
    const states = JSON.parse(sessionStorage.getItem("states"));
    const ctx = document.getElementById('myChart').getContext('2d');
    const result = JSON.parse(sessionStorage.getItem("{{projectID}}"))

    var meanValueInput = document.getElementById("meanValueOfProject");
    var varianceInput = document.getElementById("varianceOfProject");
    var myWorker = null;

    meanValueInput.value = result.project.meanValue + "/6 = " + (result.project.meanValue / 6).toFixed(2) + " {{__ "hours res"}}";
    varianceInput.value = result.project.totalVariance + "/36 = " + (result.project.totalVariance / 36).toFixed(2) + " {{__ "hours res"}}";


    const minValue = result.project.min;
    const maxValue = result.project.max;

    /*
    *
    *   Chart section
    *
    */

    var myChart = new Chart(ctx, {
        // line
        type: 'scatter', 
        data: {
        labels: [],
        datasets: [{
            label: '',
            data: [],
            fill: 'start',
            backgroundColor: ['rgba(178, 206, 255, 0.8)'],
            borderColor: 'rgba(123, 169, 249, 0.8)',
            borderWidth: 1
        }]
        },
        options: {
            showLine: true,
            scales: {
                y: {
                    min: 0,
                    max: 0.03,
                    title: {
                        display: true,
                        text: '{{__ "probability"}}'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: '{{__ "length of project"}}'
                    },
                    ticks: {
                       stepSize: 1
                    }
                }
            }
        }
    });

    document.getElementById("rangeY").addEventListener('change', (e) => {
        myChart.options.scales.y.max = e.target.value;
        myChart.update();
    });


    /*
    *
    *   Monte Carlo section
    *
    */

    document.getElementById('runSimulationButton').addEventListener('click', () => {
        runMonteCarlo();
    });

    document.getElementById('stopSimulationButton').addEventListener('click', () => {
        if (myWorker != null) {
            myWorker.terminate();
        }
    });

    function runMonteCarlo() {
        const numberOfIterations = parseInt(document.getElementById("numberOfIterations").value);
        const optionSelect = document.getElementById("optionSelect").value;
        const desiredTime = parseFloat(document.getElementById("desiredTimeValue").value);
        var x = null;
        var sum = 0;

        if (myChart.data.labels.length != 0) {
            myChart.data.datasets[0].data = [];
            myChart.data.datasets[0].label = 0
            myChart.update();
        }

        if (window.Worker) {
            myWorker = new Worker('/javascripts/monteCarlo.js');
            var data = [];
            
            data.push(numberOfIterations)
            data.push(activities)
            data.push(states);

            myWorker.postMessage(data);
            
            myWorker.onmessage = function(event) {
                var labels = [];
                var dataN = [];
                var num = 0;
                var arr = event.data.resultArr;
                sum = 0;

                arr.sort((a, b) => a.value - b.value);

                for (var i = 0; i < arr.length; i++) {
                    labels.push(arr[i].value);
                    dataN.push(arr[i].count / event.data.count);
                }

                // update chart
                myChart.data.labels = labels;
                myChart.data.datasets[0].data = dataN;
                myChart.data.datasets[0].label = event.data.count
                myChart.update();

                // update probability

                x = labels.filter(element => parseFloat(element) < desiredTime);
                
                for (var i = 0; i < x.length; i++) {
                    sum += dataN[i];
                }

                if (optionSelect == '>') {
                    sum = 1 - sum;
                }
                document.getElementById('res').value = "P (X " + optionSelect + " " + desiredTime + ") = " + (sum * 100).toFixed(2) + "%";
            }

        } else {
            // Web Workers API is not supported!
            alert("{{__ "this browser does not support workers"}}");
        }
    }

    function closeMonteCarloErr() {
        document.getElementById('monteCarloErrDiv').style.display = 'none';
    }

</script>