{{> navbar}}

{{#if flash}}
    <div style="text-align: center; position: absolute; width: 100%;" id="flash" class="alert alert-{{flash.type}}" role="alert">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <strong>{{flash.text}}</strong>
    </div>
{{/if}}

<div class="container-fluid bg pt-5">
    <div class="row">
        <div class="col-md-4 col-sm-4 col-xs-12">
            <div class="text-center">
                <h3> {{__ "project data"}}</h3>
            </div>
            <div class="form-group">
                <label>&mu;</label>
                <input type="text" class="form-control" id="meanValueOfProject" title="{{__ "project mean value"}}" readonly> 
                <label>&sigma;<sup>2</sup></label>
                <input type="text" class="form-control" id="varianceOfProject" title="{{__ "project variance"}}" readonly> 
            </div>

            <hr class="solid">

            <form class="form-container" action="">
                <div class="text-center">
                    <h3>{{__ "simulation"}}</h3>
                </div>
                <div class="form-group">
                    <label for="numberOfIterations">{{__ "number of iterations"}}</label>
                    <input type="number" class="form-control" id="numberOfIterations" placeholder="{{__ "enter number of iterations"}}" min="1000" value="1000" step="1000">
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary" id="runSimulationButton">{{__ "run simulation"}}</button>
                    <button type="button" class="btn btn-secondary" id="stopSimulationButton">{{__ "stop simulation"}}</button>
                </div>
            </form>
            <div style="background-color: #ffb8b8; margin-top: 10px; display: none;" id="monteCarloErrDiv">
                <button type="button" class="close" onclick="closeMonteCarloErr()" style="margin-right: 5px;">
                    <span aria-hidden="true">&times;</span>
                </button>
                <div id="monteCarloErrMsg" style="margin-left: 5px;">
                </div>
            </div>
            
            <hr class="solid">

            <!-- simulation results -->
            <div id="simulationResultsDiv" style="display: none;">
                <div class="text-center">
                    <h3>{{__ "simulation results"}}</h3>
                </div>
                <div>
                    {{__ "simulation time"}}:
                </div>
            </div>






        </div>
        <div class="col-md-8 col-sm-8 col-xs-24">
            <canvas id="myChart" width="800px" height="300px"></canvas>
            <div class="text-center">
                <span id="hour">00</span>:<span id="minute">00</span>:<span id="second">00</span>
            </div>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.0/chart.min.js"
    integrity="sha512-GMGzUEevhWh8Tc/njS0bDpwgxdCJLQBWG3Z2Ct+JGOpVnEmjvNx6ts4v6A2XJf1HOrtOsfhv3hBKpK9kE5z8AQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
    const activities = JSON.parse(sessionStorage.getItem("activities"));
    const states = JSON.parse(sessionStorage.getItem("states"));
    const ctx = document.getElementById('myChart').getContext('2d');
    const result = JSON.parse(sessionStorage.getItem("{{projectID}}"))

    var meanValueInput = document.getElementById("meanValueOfProject");
    var varianceInput = document.getElementById("varianceOfProject");
    var myWorker = null;

    meanValueInput.value = result.project.meanValue + "/6 = " + (result.project.meanValue / 6).toFixed(2) + " {{__ "hours res"}}";
    varianceInput.value = result.project.totalVariance + "/36 = " + (result.project.totalVariance / 36).toFixed(2) + " {{__ "hours res"}}";


    console.log("RES")
    console.log("{{projectID}}")
    console.log(result)
    console.log("ENDE")

    const minValue = result.project.min;
    const maxValue = result.project.max;

    console.log(minValue)
    console.log(typeof(minValue))
    console.log(maxValue)

    /*
    *
    *   Chart section
    *
    */

    var myChart = new Chart(ctx, {
        // line
        type: 'scatter', 
        data: {
        labels: [],
        datasets: [{
            label: '',
            data: [],
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1
        }]
        },
        options: {
            showLine: true,
            scales: {
                y: {
                    min: 0,
                    max: 0.03
                },
                x: {
                   // min: 108,
                   // max: 126,
                    ticks: {
                       // precision: 0
                       stepSize: 1
                    }
                }
            }
        }
    });
    var hour = 0;
    var minute = 0;
    var second = 0;
    var millisecond = 0;
    var cron;

    /*
    *
    *   Monte Carlo section
    *
    */

    document.getElementById('runSimulationButton').addEventListener('click', () => {
        runMonteCarlo();
    });

    document.getElementById('stopSimulationButton').addEventListener('click', () => {
        if (myWorker != null) {
            myWorker.terminate();
            pauseTimer();
        }
    });

    function runMonteCarlo() {
        const numberOfIterations = parseInt(document.getElementById("numberOfIterations").value);
        document.getElementById('simulationResultsDiv').style.display = 'inline';
        resetTimer();
        startTimer();

        if (myChart.data.labels.length != 0) {
            myChart.data.datasets[0].data = [];
            myChart.data.datasets[0].label = 0
            myChart.update();
        }

        if (window.Worker) {
            myWorker = new Worker('/javascripts/monteCarlo.js');
            var data = [];
            
            data.push(numberOfIterations)
            data.push(activities)
            data.push(states);

            myWorker.postMessage(data);
            
            myWorker.onmessage = function(event) {
                var labels = [];
                var dataN = [];
                var num = 0;
                var arr = event.data.resultArr;


                arr.sort((a, b) => a.value - b.value);
                
                for (var i = 0; i < arr.length; i++) {
                    labels.push(arr[i].value);
                    dataN.push(arr[i].count / event.data.count);
                }

                myChart.data.labels = labels;


                myChart.data.datasets[0].data = dataN;

                myChart.data.datasets[0].label = event.data.count
                myChart.update();

                if (event.data.count == numberOfIterations) {
                    pauseTimer();
                    console.log("DATA N")
                    console.log(dataN)
                    console.log("LABELS")
                    console.log(labels)
                    console.log("ENDE")
                }
            }




        } else {
            // Web Workers API is not supported!
            alert("{{__ "this browser does not support workers"}}");
        }
    }

    function closeMonteCarloErr() {
        document.getElementById('monteCarloErrDiv').style.display = 'none';
    }


    /*
    *
    *   Timer section
    *
    */

    function startTimer() {
        pauseTimer();
        cron = setInterval(() => {timer(); }, 10);
    }

    function pauseTimer() {
        clearInterval(cron);
    }

    function resetTimer() {
        hour = 0;
        minute = 0;
        second = 0;
        millisecond = 0;
        document.getElementById('hour').innerText = '00';
        document.getElementById('minute').innerText = '00';
        document.getElementById('second').innerText = '00';
    }

    function timer() {
        if ((millisecond += 10) == 1000) {
            millisecond = 0;
            second++;
        }
        if (second == 60) {
            second = 0;
            minute++;
        }
        if (minute == 60) {
            minute = 0;
            hour++;
        }
        document.getElementById('hour').innerText = returnData(hour);
        document.getElementById('minute').innerText = returnData(minute);

        if (second == 10) {
            document.getElementById('second').innerText = "10";
        } else {
            document.getElementById('second').innerText = returnData(second);
        }
    }

    function returnData(input) {
        return input > 10 ? input : `0${input}`
    }

</script>